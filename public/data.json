[
  {
    "id": "0001",
    "pic":"https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126205144.png",
    "category": "教程",
    "title": "在VScode中创建vite项目",
    "content": "原文地址：[在VScode中创建vite项目](https://caldm.cn/index.php/2024/11/26/%e5%9c%a8vscode%e4%b8%ad%e5%88%9b%e5%bb%bavite%e9%a1%b9%e7%9b%ae/)\n\n## 前言\n之前的作业一直是用idea来构建vite项目，但是为了扩充知识面，我决定在VScode中构建一次vite项目。\n\n下面我将参照Vite官方中文文档的内容，演示如何在VScode中构建vite项目。\n\n## 正文\n第一步，用VScode打开你将要存放vite项目文件夹的地方。我这里用“演示文件夹”。\n\n![image.png](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126205144.png)\n\n第二步，在终端中打开“演示文件夹”。\n\n![image.png](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126205320.png)\n\n在绿色框区域内右击，然后选择“在集成终端中打开”，之后便会在VScode下方打开“终端”页签。当然，你也可以选择在cmd中打开“演示文件夹”。\n\n第三步，下载模板。\n\nVite官方文档中提供了三种方式来下载项目模板文件。\n\n1. 使用 NPM\n```bash\nnpm create vite@latest\n```\n\n2. 使用 Yarn\n```bash\nyarn create vite\n```\n\n3. \n```bash\npnpm create vite\n```\n\n我这里使用 NPM 下载。\n\n在终端内输入 `npm create vite@latest` 后按回车（`Enter`），便会开始下载。\n\n![image.png](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126205737.png)\n\n第四步，输入项目名称。\n\n![image.png](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126205932.png)\n\n我这里使用 `my-first-vite-project` 作为项目名称。\n\n![image.png](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126210431.png)\n\n输入好名称之后按回车。\n\n设置完项目名称之后，有可能会出现一个选项，让你设置 `Package name`，直接按回车，不改动这个选项。\n\n**提示**：`Package name` 处不能使用大写字母，项目名称处的大写字母会被改成小写。因此这里建议项目名称采用全小写字母，多个单词用 `-` 连接，而不是驼峰命名法。\n\n第五步，`Select a framework`，这里直接选择 `Vue`。\n\n![image.png](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126211229.png)\n\n第六步，`Select a variant`，这里选择 `javaScript`。\n\n![image.png](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126211341.png)\n\n第七步，完成搭建。\n\n出现如图所示的内容后表示搭建成功。\n\n![image.png](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126211514.png)\n\n下面按照终端里提示的，进入项目文件夹，下载依赖，运行项目。\n\n1. 进入项目文件夹\n\n```bash\ncd my-first-vite-project\n```\n\n**提示**：这里的 `my-first-vite-project` 用你的项目文件名称替换。\n\n2. 下载依赖\n```bash\nnpm install\n```\n\n出现图中所示信息即表示依赖下载成功。\n\n![image.png](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126211840.png)\n\n\n3. 运行项目\n```bash\nnpm run dev\n```\n\n在浏览器访问终端中出现的 url 地址即可看到运行的项目。\n\n![image.png](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126211933.png)\n\n![image.png](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241126211956.png)\n",
    "date": "20241126142517",
    "author": "Caldm",
    "tags": ["VScode", "Vue"]
  },
  {
    "id": "0002",
    "pic": "https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010162153.png",
    "category": "教程",
    "title": "创建本地git仓库并推送到github",
    "content": "原文地址：[创建本地git仓库并推送到github](https://caldm.cn/index.php/2024/11/22/%e5%88%9b%e5%bb%ba%e6%9c%ac%e5%9c%b0git%e4%bb%93%e5%ba%93%e5%b9%b6%e6%8e%a8%e9%80%81%e5%88%b0github/)\n\n## 创建 github 仓库\n登录你的 github 账号，依次点击头像旁边的“+”号和“New repository”。\n![New repository](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010210709.png)\n\n![New repository-1](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010210924.png)\n\n创建成功后的页面。\n\n![New repository-2](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010211036.png)\n\n## 创建本地仓库\n### 创建 git 仓库\n在项目文件夹内**右键**，选择 `Open Git Bash here`，进入 git 窗口。\n\n![git窗口](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010163656.png)\n\n> **info** \n> 如果鼠标右键没有 `Open Git Bash here` 选项，也可以使用命令提示符窗口（*`win+r` 键，输入 `cmd` 打开*）。打开后进入到你的项目文件夹内。  \n> 如果不会切换路径，也可以在打开项目文件后，单击文件路径后输入 `cmd`。\n> \n> ![资源管理器](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010164303.png)\n> \n> ![cmd](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0git%E4%BB%93%E5%BA%93%E5%B9%B6%E6%8E%A8%E9%80%81%E5%88%B0github.png)\n\n因为谁都可以推送项目到github开源项目，所以需要一个账号来识别“是谁推送的”，下面开始配置 git 仓库的本地账户。\n\n### 配置本地仓库账户\n在上面打开的窗口中输入：\n\n```bash\ngit config user.name \"你的账户名\" --global\ngit config user.email \"你的邮箱\" --global\n```\n\n> **info** \n> 账户名可以随意设置，仅用作标识使用。\n\n> **Tip** \n> - 如果设置账户失败，可以先执行[[创建本地git仓库并推送到github.md#初始化仓库|初始化仓库]]\n> - git 常用命令一图流：https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010162153.png\n\n输入好之后可以使用下面命令查看设置的账户与邮箱。\n\n```bash\ngit config user.name\ngit config user.email\n```\n\n### 初始化仓库\n输入以下命令进行仓库的初始化。\n\n```bash\ngit init\n```\n\n## 本地仓库与github仓库的连接\n### 使用 ssh 链接\n复制 github 仓库的 ssh 链接。\n\n![ssh 链接](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010211823.png)\n\n回到 git 窗口，输入以下命令：\n\n```bash\ngit remote add 别名 \"复制的ssh链接\"\n```\n\n别名和地址的关系类似于域名和ip地址的关系。这个别名一般是 `origin`，也可以自己取一个。\n\n输入 `git remote -v` 可以查看添加的仓库信息。\n\n![添加的仓库信息](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010212250.png)\n\n### 使用 ssh 秘钥\n#### 第一步，生成 ssh 秘钥\n在 git 窗口中输入：\n\n```bash\nssh-keygen -C \"comment\"\n```\n\n`comment` 为备注信息，可以为空。\n\n![ssh 秘钥](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010212858.png)\n\n出现这么一长串信息表示成功生成 ssh 秘钥。\n\n#### 第二步，获取生成的 ssh 秘钥\n生成的 ssh 秘钥存储在 `C:\\Users\\用户名\\.ssh\\id_rsa.pub` 文件内，复制即可。\n\n### 添加 ssh 秘钥到 github\ngithub 仓库页面，点击右上角的头像，选择“setting”。\n\n![setting](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010211444.png)\n\n选择左侧的“SSH and GPG keys”。\n\n![SSH and GPG keys](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010211531.png)\n\n点击右上角的“New SSH key”。\n\n![New SSH key](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010213201.png)\n\n![粘贴 ssh key](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010213427.png)\n\n自此，本地仓库与 github 仓库的连接建立完成，下面开始第一次推送。\n\n## 提交推送\n第一步，打开 git 窗口，输入 `git add .` 命令，添加文件到 git 管理。\n\n第二步，使用 `git status` 查看是否添加成功。\n\n![git status](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010213719.png)\n\n第三步，使用 `git commit -m \"comment\"` 提交更改。`comment` 为备注信息，可以不写。\n\n![提交更改](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010213855.png)\n\n第四步，使用 `push` 命令将本地仓库推送到远程仓库去。\n\n```bash\ngit push -u origin master\n```\n\n- `origin` 是上文仓库设置的别名，如果自己为仓库设置了其他的别名，则将其替换即可。\n- `master` 是推送的分支，默认是 `master`，具体的可以在 Git Bash 路径的最右端可以看到。\n\n推送成功。\n\n![推送成功](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010214143.png)\n\n最后刷新我们的 github 仓库即可看到刚刚推送的内容。\n\n![github 仓库内容](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241010214302.png)\n\n## 可能出现的问题\n在执行 `push` 时出现如下错误：\n\n```bash\nssh: connect to host github.com port 22: Connection refused\n```\n\n解决方法：连接 github 的 443 端口。\n\n> **Tip** \n> 这个方法不一定有效，可以先在 git 窗口输入 `ssh -T -p 443 git@github.com` 测试与 github 的网络通信是否正常。\n> \n> 提示 `Hi xxxxx! You've successfully authenticated, but GitHub does not provide shell access.` 表示正常，就可以使用下面的解决方案。\n\n在 git 窗口输入如下命令：\n\n```bash\nvim ~/.ssh/config\n```\n\n然后再打开的文件内输入如下内容：\n\n```txt\nHost github.com\nHostname ssh.github.com\nPort 443\n```\n\n如果找不到该文件或不会使用 vim，则可以来到路径：`C:\\Users\\用户名\\.ssh`，用记事本打开 `config` 文件，然后再输入刚才的内容即可。如果没有 `config` 文件，新建即可。\n",
    "date": "20241010213054",
    "author": "Caldm",
    "tags": ["git", "github"]
  },
  {
    "id": "0003",
    "pic": "./1731198849389.png",
    "category": "Debug",
    "title": "Vite项目打包后图片等资源丢失的解决方案",
    "content": "原文地址：[Vite项目打包后图片等资源丢失的解决方案](https://caldm.cn/index.php/2024/11/23/vite%e9%a1%b9%e7%9b%ae%e6%89%93%e5%8c%85%e5%90%8e%e5%9b%be%e7%89%87%e7%ad%89%e8%b5%84%e6%ba%90%e4%b8%a2%e5%a4%b1%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88/)\n\n本篇文章主要解决[Vue 项目打包后浏览器页面空白](Vue%20项目打包后浏览器页面空白.md)中提到的vite项目打包后成功显示内容，但是丢失图片等资源的情况。\n\n**想直接看解决方法的可以查看文档底部的“解决方法”**\n\n## 项目中引入图片的方式\n一般来说在vite项目中是通过 `import` 来导入图片的。\n\n```js\nimport ImageSrc from '@/assets/image.png'\n```\n\n这样子引入完全没有问题，一般情况下也不会出现打包后图片资源丢失的问题。但是有时候，我们也想通过变量来引入图片。\n\n```js\nconst imagePath = \"@/assets/image.png\";\nimport ImageSrc = import(imagePath);\n```\n\n或者是\n\n```js\nconst imageName = \"image.png\";\nimport ImageSrc = import(\"@/assets/\" + imageName);\n```\n\n然而这两种方式，不说是在打包后无法显示，在开发过程中也是无法显示的，最开始我也遇到这个问题，在网上找了许多教程，最后发现只需要按照下面写的方式，就可以正常显示。\n\n```vue\n<script setup>\nconst imageName = \"image.png\";\n</script>\n<template>\n\t<img :src=\"`/src/assets/${imageName}`\"></img>\n</template>\n```\n\n但是这样写的话，图片可以在开发过程中显示，但打包后依旧不显示。\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241124145325.png)\n\n从浏览器“开发者工具”中可以看到，正常显示的图片名称后边经过了 hash（哈希），并且路径经过了处理，无法显示的图片路径则与源代码中的路径相同，没有经过处理。\n\n现在有两种方法解决问题：\n1. 处理图片路径，使其正常显示\n2. 修改其他内容，使不处理的图片路径也能正常显示\n\n查看[Vite 官方文档](https://vitejs.cn/vite3-cn/)中关于 `public` 部分的内容。\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241124145747.png)\n\n<center><a href=\"https://vitejs.cn/vite3-cn/guide/assets.html\">Vite 官方文档 - 静态资源处理 - public 目录</a></center>\n\n通过上面的“开发者工具”可以看到图片的名字并没有被改变，这符合文档中所说的“必须保持原有文件名（没有经过 hash）”。\n\n## 解决方法\n将我们项目中根据变量导入的文件放到**项目根目录下的 `public` 文件夹内**，然后将变量前加上 `'./'`，注意这里的 `./` 是字符串，需要加引号。\n\n```vue\n<script setup>\nconst imageName = \"image.png\";\n</script>\n<template>\n\t<img :src=\"'./' + imageName\"></img>\n</template>\n```\n\n如此图片便可以正常显示。\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241124150649.png)\n",
    "date": "20241123145644",
    "author": "Caldm",
    "tags": ["Vue"]
  },
  {
    "id": "0004",
    "pic": "https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241016144839.png",
    "category": "教程",
    "title": "VScode创建Vue项目",
    "content": "原文地址：[VScode创建Vue项目](https://caldm.cn/index.php/2024/11/22/vscode%e5%88%9b%e5%bb%bavue%e9%a1%b9%e7%9b%ae/)\n\n第一步，创建一个空文件夹，然后用 VScode 打开它。然后点击菜单栏的“终端-新建终端”。\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241016144839.png)\n\n第二步，全局安装 vue-cil，它可以帮助我们快速构建 Vue 项目。\n\n```bash\nnpm install -g vue-cli\n```\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241016145033.png)\n\n第三步，全局安装 webpack，它是 js 打包工具。\n\n```bash\nnpm install -g webpack\n```\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241016145216.png)\n\n第四步，创建项目。在终端中输入以下命令。\n\n```bash\nvue init webpack myapp1\n```\n\n这里的 `myapp1` 是项目名称，按照自己的实际情况填写。\n\n输入命令后会出现几个配置项。\n- `? Project name (myapp1)` 这是要你填写项目名称，不可以填写大写字母，否则会提示 `>> Sorry, name no longer contain capital letters.` 提示。\n- `? Project description (A Vue.js project)` 这是要你填写项目描述，可以不填，直接按 `Enter` 即可。\n- `? Author (Caldm <1832400547@qq.com>)` 这是要你填写作者信息，我这里已经出现了，所以直接按 `Enter` 即可。\n\n剩下的配置项根据需要选择，如果不知道是否需要，那就选 Y，最后选择下载方式，根据自己情况选择，不知道怎么选，就选 `npm`。之后等待下载完成即可。\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241016150005.png)\n\n下载完成后会出现左侧目录的文件，下面的终端会弹出图片里的信息。之后在终端里进入你的项目目录，输入以下命令即可运行项目。\n\n```bash\nnpm run dev\n```\n\n项目默认运行地址：\n\n```bash\nhttp://localhost:8080\n```\n",
    "date": "20241122123456",
    "author": "Caldm",
    "tags": ["VScode", "Vue"]
  },
  {
    "id": "0005",
    "pic": "https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241015225628.png",
    "category": "Debug",
    "title": "IDEA中request.getParameter爆红解决方法",
    "content": "原文地址：[IDEA中request.getParameter爆红解决方法](https://caldm.cn/index.php/2024/11/22/idea%e4%b8%adrequest-getparameter%e7%88%86%e7%ba%a2%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95/)\n\nIDEA 中 `request.getParameter()` 等方法出现红色标识的原因是没有导入 jar 的缘故。下面导入 tomcat 内置的 jar 来解决。\n\n第一步：File -> Project Structure\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241015225628.png)\n\n第二步：选择 Libraries -> + -> Java\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241015225716.png)\n\n第三步：定位到 tomcat 安装文件夹的 lib 文件夹，然后点“OK”。\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241015225839.png)\n\n添加成功后会在视图里出现添加的 jar 的文件夹。\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241015225948.png)\n",
    "date": "20241122123456",
    "author": "Caldm",
    "tags": ["idea", "Q&A", "Tomcat"]
  },
  {
    "id": "0006",
    "pic": "./1731198992728.png",
    "category": "读书笔记",
    "title": "实例与构造函数没有直接关系，但是为什么函数实例都具有的constructor属性能访问构造函数",
    "content": "原文地址：[实例与构造函数没有直接关系，但是为什么函数实例都具有的constructor属性能访问构造函数](https://caldm.cn/index.php/2024/11/22/%e5%ae%9e%e4%be%8b%e4%b8%8e%e6%9e%84%e9%80%a0%e5%87%bd%e6%95%b0%e6%b2%a1%e6%9c%89%e7%9b%b4%e6%8e%a5%e5%85%b3%e7%b3%bb%ef%bc%8c%e4%bd%86%e6%98%af%e4%b8%ba%e4%bb%80%e4%b9%88%e5%87%bd%e6%95%b0%e5%ae%9e/)\n\n## 问题描述\n在《JavaScript高级程序设计》[^1]书中 P253 页说：\n\n> 实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有。\n\n但是在实际应用中发现，函数实例都具有 `constructor` 属性可以访问到构造函数，这与书中的内容产生冲突。\n\n```js\nfunction Person() {\n\tname: \"Jake\"\n}\nconst p = new Person();\nconsole.log(p.constructor === Person); // true\n```\n\n既然所有的函数实例都具有 `constructor` 属性，且可以访问到构造函数，那为什么原文中说“**没有**”。\n\n## 解决思路\n首先重新审视原文内容。\n\n> 实例与构造函数原型之间有直接的联系，但**实例与构造函数之间没有**。\n\n这里的“没有”并不是指实例与构造函数之间没有关系，而是**没有直接关系**，也就是说存在间接关系，那么实例还是有可能访问到构造函数的。既然如此，我们思考有什么东西是指向构造函数的，答案很明显是函数原型，每个函数原型都具有 `constructor` 指向它的构造函数，而这个属性名称与前面所述的函数实例都具有的属性名称相同。\n\n## 问题答案\n函数实例都具有的 `constructor` 属性并不是来自它自己，而是它的 `__proto__` 指向的函数原型的，`p.consturctor` 等同于 `p.__proto__.constructor`。\n\n## 问题产生的原因\n原文中说的“实例与构造函数之间没有”让人误以为是“没有关系”，再加上阅读代码时，忽略了程序会沿着原型链向上寻找的机制，这才导致问题的出现。\n\n[^1]: \\[图灵程序设计丛书\\]《JavaScript高级程序设计(第4版)》\n",
    "date": "20241122123456",
    "author": "Caldm",
    "tags": ["《JavaScript高级程序设计》"]
  },
  {
    "id": "0007",
    "pic": "https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241123205328.png",
    "category": "Debug",
    "title": "Vue 项目打包后浏览器页面空白",
    "content": "原文地址：[Vue 项目打包后浏览器页面空白](https://caldm.cn/index.php/2024/11/23/vue-%e9%a1%b9%e7%9b%ae%e6%89%93%e5%8c%85%e5%90%8e%e6%b5%8f%e8%a7%88%e5%99%a8%e9%a1%b5%e9%9d%a2%e7%a9%ba%e7%99%bd/)\n\n这里讲两种 Vue 项目出现此问题后的解决方法。\n\n## Vite 项目\nVite 项目出现打包后浏览器页面空白的问题，首先打开“开发者工具”，在控制台处查看错误信息。\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241123205328.png)\n\n从错误信息中可以看到，我们项目的资源文件没有正确加载。\n\n解决方法：**在 `vue.config.js` 中添加这样一行代码。 `base: \"./\"`**。\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241123210406.png)\n\n添加后再次打包即可正常显示。\n\n---\n\n如果依旧无法解决空白页面，请检查路由配置，是否使用官方示例中的 `history: createMemoryHistory()`。\n\n我自己的项目是使用 `createWebHashHistory()` 和 `createMemoryHistory()` 均可。\n\n---\n\n如果打包后在 idea 中右键 `dist/index.html` -> `open in` -> `Browser` -> Edge或谷歌等浏览器，如果这样能正常显示，但是在文件管理中打开 `dist/index.html` 无法正常显示，可以下载 `@vitijs/plugin-legacy` 插件。\n\n先检查自己是否安装 `@vitijs/plugin-legacy` 插件\n\n```bash\nnpm list @vitejs/plugin-legacy\n```\n\n如果显示 `empty`，则进行安装。\n\n```bash\nnpm install @vitejs/plugin-legacy\n```\n\n安装成功后进行在 `vue.config.js` 中添加以下配置。\n\n在文件顶部添加\n\n```js\nimport legacy from '@vitejs/plugin-legacy'\n```\n\n在 export default defineConfig()内添加下面代码\n\n```js\nexport default defineConfig({\n\t// ...\n\tplugins: [\n\t\t// 其他插件\n\t\tlegacy({\n\t\t\ttargets: [\"defaults\", \"not IE 11\"]\n\t\t})\n\t]\n\t// ...\n})\n```\n\n最后贴一张我自己的配置文件图片，防止读者不知道这段代码添加到哪里。\n\n![](https://ob-tc-caldm-1315806820.cos.ap-nanjing.myqcloud.com/img/20241123225808.png)\n\n---\n\n如果在进行以上配置后成功打包，但是存在图片等资源丢失的情况，请看 [Vite项目打包后图片等资源丢失的解决方案](Vite项目打包后图片等资源丢失的解决方案.md)。\n\n## Vue-cli 项目\n我第一次创建 Vue 项目便是使用 Vue-cli，也是遇到了打包后页面空白的问题，因为 Vue-cli 项目中默认隐藏了 Webpack 配置，导致我根本找不到网上其他教程中所说的 webpack.config.js 文件，即便是自己创建 vue.config.js 文件也没有解决。\n\n不过在我自己摸索下，还是成功解决了问题。\n\n因为两个的报错原因是一样的，这里就不放 Vue-cli 项目的报错信息了。\n\n**在项目文件夹下的 `config/index.js` 文件内找到 `assetsPublicPath: '/'`，将`/` 修改为 `./` 即可。**\n\n不过这样的方式并不推荐，更推荐的方式是使用 `vue.config.js` 来进行自定义配置。\n",
    "date": "20241123123456",
    "author": "Caldm",
    "tags": ["Vue"]
  },
  {
    "id": "0008",
    "pic": "./1731198840342.png",
    "category": "评论",
    "title": "2024年11月24日22:19:54",
    "content": "原文地址：[2024年11月24日22:19:54](https://caldm.cn/index.php/2024/11/24/2024%e5%b9%b411%e6%9c%8824%e6%97%a5221954/)\n\nB站视频地址 -> [IDEA快速搭建Springboot + maven项目](https://www.bilibili.com/video/BV17m411d7Ny/?share_source=copy_web&vd_source=32d94feaa7210b0b107b881ca5445bd8)\n\n首先说明，我不知道是不是因为我没有跟着教程添加 Thymeleaf 框架，反正我在写跳转控制时，返回的文件名如果不添加后缀名的话，浏览器访问就会显示 404\n\n",
    "date": "20241124221954",
    "author": "Caldm",
    "tags": ["idea", "SpringBoot"]
  }
]